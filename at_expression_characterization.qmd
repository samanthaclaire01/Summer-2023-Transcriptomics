---
title: "INTACT expression analyses"
format: 
  html:
    code-fold: true
    toc: true
    fig-width: 9.5
    fig-height: 6.5
    embed-resources: true
    warning: false
    erro: false
date: May 11, 2023
author: Samantha Cassity
---

# Overview

This note will overview the initial expression exploration of At, Cs, and Es salt expression

Remember, there are a few different sequencing dynamics going on:

Arabidopsis: whole and nuclear RNA-seq, single-end sequencing for both

Camelina and Eutrema: nuclear paired-end RNA-seq, single-end whole RNA-seq

```{r}
library(DESeq2)
library(tximport)
library(GenomicFeatures) # takes annotation files and imports them as a database useable in R
library(readr)
library(magrittr)
```

```{r}
txdb <- makeTxDbFromGFF("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/Athaliana_annotation.gtf") # txdb = transcript database

k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")

#tx2gene$TXNAME <- sub("^", "transcript:", tx2gene$TXNAME)

#setwd("/Users/kylepalos/Desktop/Nelson_lab/intact_salt/salmon/at")

library(readr)
at_samples <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/quants/at/atsamps.txt", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE) # loads in the meta RNAseq data

# at_samples$Sample <- gsub('_1_quant', '', at_samples$Sample) # renames Samples properly


# tell R where the Salmon quant.sf files are
setwd("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/quants/at")
files <- file.path(at_samples$Sample, "quant.sf") # telling r where to find the quant.sf files


txi <- tximport(files, type = "salmon", tx2gene = tx2gene, countsFromAbundance = "lengthScaledTPM") 

# transcript import, imports certain quantification files. salmon is a program that takes fastq files and skips the mapping step to just look at known genes to quantify them. countsfromabundance normalizes the expression data based on certain features of the genes (i.e. lengths .. ). tx2gene = tx2gene puts at gene level (AKA no isoforms)

# load in with broad design
dds <- DESeqDataSetFromTximport(txi, at_samples, ~ Condition) # counts is implied x ~ condition
# DEseq2 statistically tests whether or not genes are undergoing specific expression changes given rnaseq data

# let's impose some slightly agressive pre-filtering:
# gene must have at least 10 reads in at least 4 experiments
keep <- rowSums(counts(dds) >= 10) >= 4 

dds <- dds[keep,] # only retaining the keep genes

# run the deseq2 pipeline
dds <- DESeq(dds) # the stats model
```

This next chunk runs qc (quality control) on the RNAseq data to ensure that the samples are behaving the way we expect. The code makes a sample distance heatmap which tells us how similar the samples are to each other.

```{r}
vsd <- vst(dds, blind=FALSE) # vst = variance stabilized transformation (flattening the numbers so they're less affected by variance that DEseq cant explain given the model provided to it)

library("RColorBrewer")
library("pheatmap")
sampleDists <- dist(t(assay(vsd))) # calculating a distance between all samples based on the gene expression value of every gene
sampleDistMatrix <- as.matrix(sampleDists) # converts sampleDists to a matrix
rownames(sampleDistMatrix) <- vsd$Sample2 
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)
```

Arabidopsis had multiple problematic datasets

Based on clustering, it was likely that somewhere along the way, samples got mixed up.

Read in a re-annotated metadata file and re-do DESeq2 workflow:

```{r}
dds <- DESeqDataSetFromTximport(txi, at_samples, ~ Condition2) # switches the problematic samples

# let's impose some slightly agressive pre-filtering:
# gene must have at least 10 reads in at least 4 experiments
keep <- rowSums(counts(dds) >= 10) >= 4
dds <- dds[keep,]

# run the deseq2 pipeline
dds <- DESeq(dds)
```

Do samples cluster based on how I re-annotated?

```{r}
vsd <- vst(dds, blind=FALSE)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- vsd$Condition2
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)
```

Condition now clusters together. Not great, but it looks okay

Get differential expression tables:

**Whole salt vs Whole control**

```{r}
res <- results(dds, contrast = c("Condition2", "whole_salt", "whole_control"), tidy = T)
# creates a dataframe

res %>%
  dplyr::filter(padj <= .05) %>%
  dplyr::distinct(row)

# results() conducts differential expression analysis on whole_salt versus whole_control. The results are stored in res as a dataframe. filter() filters out results that are not significant (only takes results with p-values that are less than or equal to .05) and distinct() removes any duplicate rows.
```

58 genes have an adjusted p-value \<= .05

1 newly annotated transcript

### How many genes are significant if we remove all the bad samples?

```{r}
at_metadata3 <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/quants/at/atsamps_bad_removed.txt", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE)


# fix at_samples_bad_removed.txt

setwd("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/quants/at")

files <- file.path(at_metadata3$Sample...5, "quant.sf")

txi <- tximport(files, type = "salmon", tx2gene = tx2gene, countsFromAbundance = "lengthScaledTPM")

dds <- DESeqDataSetFromTximport(txi, at_metadata3, ~ Condition)

# let's impose some slightly agressive pre-filtering:
# gene must have at least 10 reads in at least 4 experiments
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep,]

# run the deseq2 pipeline
dds <- DESeq(dds)
```

how do samples cluster?

```{r}
vsd <- vst(dds, blind=FALSE)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
# change label names 
rownames(sampleDistMatrix) <- vsd$Sample2
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)
```

How many significant genes in whole salt vs whole control?

```{r}
res <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"), tidy = T)

at_whole_up <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange >= 1) %>%
  dplyr::distinct(row) 

# 2^1 AKA looking for 2x more different
# log2FoldChange = how much different are gene expression values in one condition versus the other
# control is the denominator for contrast 
# Example: 10 counts in salt/ 100 counts in no salt = 0.1, after log2foldchange would be a negative number
# at_whole_up are positive therefore are upregulated under salt stress
# at_whole_down are negative therefore are downregulated under salt stress



at_whole_down <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange <= -1) %>%
  dplyr::distinct(row) 

# x = 185 upregulated in salt, y = 54 downregulated in salt for just whole samples


res <- results(dds, contrast = c("Condition", "nuc_salt", "nuc_control"), tidy = T)

at_nuc_up <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange >= 1) %>%
  dplyr::distinct(row) 


at_nuc_down <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange <= -1) %>%
  dplyr::distinct(row) 

# x = 2332 upregulated in salt, y = 1341 downregulated in salt for just nuclei samples


res <- results(dds, contrast = c("Condition", "nuc_salt", "whole_salt"), tidy = T)

at_nuc_whole_salt_up <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange >= 1) %>%
  dplyr::distinct(row) 



at_nuc_whole_salt_down <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange <= -1) %>%
  dplyr::distinct(row) 

# x = 1433 upregulated in salt, y = 1636 downregulated in salt for just salt samples


res <- results(dds, contrast = c("Condition", "nuc_control", "whole_control"), tidy = T)

at_nuc_whole_ctrl_up <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange >= 1) %>%
  dplyr::distinct(row) 



at_nuc_whole_ctrl_down <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange <= -1) %>%
  dplyr::distinct(row) 


# x = 2459 upregulated in salt, y = 4427 downregulated in salt for just control samples
```

228 genes with adjusted p-value \<= 0.05

What are the GO terms for up-regulated genes?

```{r}
goterms <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/at_ensembl_go_term.txt", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE) %>%
  dplyr::select(2,1)

background <- rownames(dds) %>%
  as.data.frame() %>%
  dplyr::rename(gene = 1)

library(dbplyr)
library(clusterProfiler)
library(DOSE)
library(enrichplot)
library(tidyverse)


at_whole_up_go <- enricher(
at_whole_up$row,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
 background$gene,
  minGSSize = 10,
  maxGSSize = 500,
  qvalueCutoff = 0.05,
  gson = NULL,
 TERM2GENE =  goterms
)

# genes upregulated by salt in the whole samples. padjustmethod adjusts for multiple testing. TERM2GENE is the df that maps goterms to geneIDs.

head(at_whole_up_go)

at_whole_up_go <- mutate(at_whole_up_go, FoldEnrichment = parse_ratio(GeneRatio) / parse_ratio(BgRatio))

# mutate adds a column where a new calculation occurs.

dotplot(at_whole_up_go, x="FoldEnrichment") + xlab("Fold Enrichment")
```

What about nuclear up regulated genes?

```{r}

at_nuc_up_go <- enricher(
at_nuc_up$row,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
 background$gene,
  minGSSize = 10,
  maxGSSize = 500,
  qvalueCutoff = 0.05,
  gson = NULL,
 TERM2GENE =  goterms
)


head(at_nuc_up_go)

at_nuc_up_go <- mutate(at_nuc_up_go, FoldEnrichment = parse_ratio(GeneRatio) / parse_ratio(BgRatio))

dotplot(at_nuc_up_go, x="FoldEnrichment")
```

No enriched GO terms for the 2,339 up-regulated genes in the nucleus during salt stress relative to control - perhaps too many

Any GO terms for Nuclear vs whole during control?

```{r}
at_nuc_whole_ctrl_up_go <- enricher(
at_nuc_whole_ctrl_up$row,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
 background$gene,
  minGSSize = 10,
  maxGSSize = 500,
  qvalueCutoff = 0.05,
  gson = NULL,
 TERM2GENE =  goterms
)


head(at_nuc_whole_ctrl_up_go)

at_nuc_whole_ctrl_up_go <- mutate(at_nuc_whole_ctrl_up_go, FoldEnrichment = parse_ratio(GeneRatio) / parse_ratio(BgRatio))

dotplot(at_nuc_whole_ctrl_up_go, x="FoldEnrichment")
```

Make a plot showing all DEGs and highlight some key ones

First do whole salt vs whole control:

```{r}
library(tidyverse)
res <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"), tidy = T)

# results conducts differential expression analysis on whole_salt versus whole_control samples 

at_whole_salt <- res %>%
  dplyr::filter(padj <= .05 &
                  abs(log2FoldChange) >= 1) %>%
  dplyr::mutate(rank = dense_rank(desc(log2FoldChange)))

# keeps only the rows where the adjusted p-value is less than or equal to 0.05 and the absolute value of the log2foldchange is greater than or equal to 1. 

# mutate adds a new column called rank to the filtered dataset. The dense_rank function assigns a rank to each row based on the descending order of the log2FoldChange values. Higher absolute fold changes will have lower ranks.

library("clipr")
at_whole_salt %>% 
  distinct(row) %>%
  write_clip()

 at_whole_salt %>%
   ggplot(aes(x = rank, y = log2FoldChange, color = padj)) +
  scale_x_reverse() +
  geom_point(size = 1.8, alpha = .75) +
  viridis::scale_color_viridis() +
  xlab('log2FC rank (most upregulated = rank 1)') +
  ggtitle("DE ranking of DEGs b/w whole salt and whole control") +
   theme_classic()+
  annotate(geom = "text", x = 50, y = 18, label = "Many LEA genes\n(#1,3,5,6)", hjust = "center") +
     annotate(geom = "text", x = 20, y = 1, label = "LncRNAs\n(#7,9,53)", hjust = "center") +
     annotate(geom = "text", x = 90, y = -1, label = "WRKY45\n(#103 - L2FC = 4)", hjust = "center") +
     annotate(geom = "text", x = 61, y = 10, label = "Aldehyde oxidase\n(#2 - L2FC = 9.4)", hjust = "center") +
     annotate(
    geom = "curve", x = 35, y = 10, xend = 2, yend = 9.4, 
    curvature = 0, arrow = arrow(length = unit(2, "mm"))
  ) +
        annotate(geom = "text", x = 185, y = -17, label = "SNO-COBRA1B\n(#226 - L2FC = -18)", hjust = "center") 
 
# makes a plot with rank on the x axis and log2foldchange on the y axis. The padj column determines the color of the points on the plot. scale_x_reverse  reverses the x-axis scale, which means lower rank values will be on the right side of the plot. The annotate functions add annotations and an arrow to the plot. 
 
 
 at_whole_down_go <- enricher(
at_whole_down$row,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
 background$gene,
  minGSSize = 10,
  maxGSSize = 500,
  qvalueCutoff = 0.05,
  gson = NULL,
 TERM2GENE =  goterms
)

# genes downregulated by salt in the whole samples. padjustmethod adjusts for multiple testing. TERM2GENE is the df that maps goterms to geneIDs.
 
#head(at_nuc_up_go)

at_whole_down_go <- mutate(at_whole_down_go, FoldEnrichment = parse_ratio(GeneRatio) / parse_ratio(BgRatio))

dotplot(at_whole_down_go, x="FoldEnrichment")
```

Load in the IDs and types of RNAs we've annotated:

```{r}

library(readr) # readr provides functions for reading delimited text files.

at_as_cod <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/at_antisense_coding_txIDs.txt", 
                                        delim = "\t", escape_double = FALSE, 
                                        col_names = FALSE, trim_ws = TRUE) %>% mutate(type = "as-cod")

# read the file and add a new column called type that maps as_cod to each 


at_as_nc <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/at_antisense_noncoding_txIDs.txt", 
                        delim = "\t", escape_double = FALSE, 
                        col_names = FALSE, trim_ws = TRUE) %>% mutate(type = "as-lncRNA")

at_int_cod <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/at_lincRNA_coding_txIDs.txt", 
                        delim = "\t", escape_double = FALSE, 
                        col_names = FALSE, trim_ws = TRUE) %>% mutate(type = "int-cod")

at_int_nc <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/at_lincRNA_noncoding_txIDs.txt", 
                       delim = "\t", escape_double = FALSE, 
                       col_names = FALSE, trim_ws = TRUE) %>% mutate(type = "lincRNA")


at_as_cod <- right_join(tx2gene, at_as_cod, by = c("TXNAME" = "X1"))
at_as_nc <- right_join(tx2gene, at_as_nc, by = c("TXNAME" = "X1"))
at_int_nc <- right_join(tx2gene, at_int_nc, by = c("TXNAME" = "X1"))
at_int_cod <- right_join(tx2gene, at_int_cod, by = c("TXNAME" = "X1"))

# joins each dataframe to tx2gene by the transcript name

at_RNAs <- rbind(at_as_cod,
                 at_as_nc,
                 at_int_cod,
                 at_int_nc)

# rbind combines the four dataframes into one dataframe called at_RNAs

tmap <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/tmap_files/at_gffcompare.Athaliana_merged.gtf.tmap", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE)
```

What about a volcano plot instead?

```{r}
library(EnhancedVolcano)
library(apeglm)
res <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"))

res2 <- as.data.frame(res) %>% rownames_to_column(var = "gene") %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05)

res2 %>%
  inner_join(., at_RNAs, by = c("gene" = "GENEID")) %>%
  left_join(., tmap, by = c("gene" = "qry_gene_id"))


res <- lfcShrink(dds,
    contrast = c('Condition','whole_salt','whole_control'), res=res, type = 'ashr')



  lab_italics <- paste0("italic('", rownames(res), "')")
  selectLab_italics = paste0(
    "italic('",
    c('MSTRG.8713','MSTRG.18717','MSTRG.12528'),
    "')")



 EnhancedVolcano(res,
    lab = lab_italics,
    x = 'log2FoldChange',
    y = 'pvalue',
        title = 'Whole salt vs whole control',
    subtitle = "",
    selectLab = selectLab_italics,
    xlab = bquote(~Log[2]~ 'fold change'),
    pCutoff = 10e-2,
    FCcutoff = 1.0,
    pointSize = 2.5,
    labSize = 3.0,
    labCol = 'black',
    labFace = 'bold',
    boxedLabels = TRUE,
    parseLabels = TRUE,
    col = c('black', 'pink', 'purple', 'red3'),
    colAlpha = 3/5,
    legendPosition = 'right',
    legendLabSize = 12,
    legendIconSize = 4.0,
    drawConnectors = TRUE,
    widthConnectors = 1.0,
    colConnectors = 'black')

 ggsave(plot = last_plot(),"C:/Users/cassi/OneDrive/Desktop/REU/Analyses/at_test_volcano.pdf", width = 8, height = 6)
```

plot the counts of these lncRNAs:

```{r}
plotCounts(dds, gene="MSTRG.18717", intgroup="Condition")

plotCounts(dds, gene = "MSTRG.8713", intgroup = 'Condition')

plotCounts(dds, gene = "MSTRG.12528", intgroup = 'Condition')

```

What is the overlap of DEGs between the Arabidopsis conditions of interest?

```{r}
at_nuc <- results(dds, contrast = c("Condition", "nuc_salt", "nuc_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "nuclear_salt")

# conducts DE analysis in nuclear salt versus nuclear control samples. It filters only data that have an absolute value of a log2foldchange that is >= 1 and a p <= 0.05 (only keeps significant data), and adds a type column named nuclear_salt

at_whole <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "whole_salt")

at_comp_salt <- results(dds, contrast = c("Condition", "nuc_salt", "whole_salt"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "compartment_salt")

# at_comp_salt is composed of every salt sample

at_comp_ctrl <- results(dds, contrast = c("Condition", "nuc_control", "whole_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "compartment_control")

# at_comp_ctrl is composed of all control samples

library(ggvenn)
library(ggVennDiagram)
combined <- list(nuclear_salt = at_nuc$row,
                 whole_salt = at_whole$row,
                 compartment_control = at_comp_ctrl$row,
                 compartment_salt = at_comp_salt$row)
ggvenn(combined,
       set_name_size = 2.5) # had to change the name size from 4 to 2.5 to get the names to fit in the final image of the plot



# make a venn diagram for newly annotated trancripts:
at_nuc <- results(dds, contrast = c("Condition", "nuc_salt", "nuc_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "nuclear_salt") %>%
  filter(grepl("MSTRG", row))

at_whole <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "whole_salt") %>%
  filter(grepl("MSTRG", row))

at_comp_salt <- results(dds, contrast = c("Condition", "nuc_salt", "whole_salt"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "compartment_salt") %>%
  filter(grepl("MSTRG", row))

at_comp_ctrl <- results(dds, contrast = c("Condition", "nuc_control", "whole_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "compartment_control") %>%
  filter(grepl("MSTRG", row))


combined <- list(nuclear_salt = at_nuc$row,
                 whole_salt = at_whole$row,
                 compartment_control = at_comp_ctrl$row,
                 compartment_salt = at_comp_salt$row)
ggvenn(combined,
       set_name_size = 2.5) # had to change the name size from 4 to 2.5


combined2 <- rbind(at_nuc, at_whole, at_comp_ctrl, at_comp_salt)

library(data.table)
combined2_wide <- data.table::dcast(setDT(combined2), row ~ type, fun.aggregate = length) %>% as.data.frame()

combined2_wide %>%
  filter(compartment_control == 1 &
           compartment_salt == 0 &
           nuclear_salt == 1 &
           whole_salt == 0) %>%
  distinct(row) %>%
  left_join(., at_RNAs, by = c("row" = "GENEID")) %>%
  left_join(., tmap, by = c("row" = "qry_gene_id"))

# combined2 wide is a dataframe containing a column for genes and four columns representing sample types. "1"s in the type column represent the gene being present in that sample.
```

How about a heatmap of newly annotated RNAs

```{r}
tpm <- txi$abundance %>%
  as.data.frame() %>%
  rownames_to_column(var = "gene") %>%
  filter(grepl("MSTRG", gene)) %>%
  column_to_rownames(var = "gene")
colnames(tpm) <- at_metadata3$Condition

x <- apply(tpm, 1, mad) #Calculate IQR  
y <- tpm[x>quantile(x,0.5),] # selecting top 50% most variable genes  

tpm_z <- scale(t(t(tpm)))
# filter for variability

lnc_vst <- assay(vsd) %>%
  as.data.frame() %>%
  rownames_to_column(var = "gene") %>%
  filter(grepl("MSTRG", gene)) %>%
  column_to_rownames(var = "gene") 
colnames(lnc_vst) <- at_metadata3$Condition
lnc_vst<- lnc_vst %>%
  relocate(8, .after = 5)
x <- apply(lnc_vst, 1, mad) #Calculate IQR  
y <- lnc_vst[x>quantile(x,0.5),] # selecting top 50% most variable genes  

lnc_vst_z <- t(scale(t(y)))

library(ComplexHeatmap)
library(pheatmap)
paletteLength <- 50
myColor <- colorRampPalette(c("darkblue", "white", "orange"))(paletteLength)
# length(breaks) == length(paletteLength) + 1
# use floor and ceiling to deal with even/odd length pallettelengths
myBreaks <- c(seq(min(lnc_vst_z), 0, length.out=ceiling(paletteLength/2) + 1), 
              seq(max(lnc_vst_z)/paletteLength, max(lnc_vst_z), length.out=floor(paletteLength/2)))



samp1 <- rownames(lnc_vst_z) %>% as.data.frame() %>% rename(gene = 1)

at_RNAs2 <- at_RNAs %>%
  select(-TXNAME) %>%
  inner_join(., samp1, by = c("GENEID" = "gene")) %>%
  distinct(GENEID, .keep_all = T) %>%
  column_to_rownames(var = "GENEID")


ann_colors = list(
  type = c("as-cod" = "lightblue", "as-lncRNA" = "purple", "int-cod" = "red", "lincRNA" = "black"))


pdf("C:/Users/cassi/OneDrive/Desktop/REU/Analyses/at_RNA_heatmap.pdf",
    width = 8, height = 8)
pheatmap(lnc_vst_z, breaks = myBreaks, color = myColor,
         cluster_cols = F, annotation_row = at_RNAs2, annotation_colors = ann_colors, name = "Z-Score")



dev.off()
```
