---
title: "es_expression_characterization"
author: "Samantha Cassity"
format: html
editor: visual
---

## Overview

This document investigates expression in Eutrema salsugineum

Camelina sequencing dynamics: nuclear paired-end RNA-seq, single-end whole RNA-seq

## Packages

The following code loads in the packages necessary to run the script

```{r}

library(DESeq2)
library(tximport)
library(GenomicFeatures) # takes annotation files and imports them as a database useable in R
library(readr)
library(magrittr)
```

## Filtering data and performing DE analysis

The following chunk performs differential gene expression analysis using the DESeq2 package in R. It starts by creating a transcript database (txdb) from a GFF file containing genome annotation information. Next, it reads in the Cs sample metadata file and sets the working directory. It then imports transcript-level quantification data from quant.sf files using the tximport function, which incorporates the gene-to-transcript mapping information (tx2gene) and normalizes the expression data.

A DESeqDataSet object (dds) is created from the imported data and sample metadata and pre-filtering is applied to retain genes with at least 10 reads in at least 4 experiments. Finally, the DESeq function is used to run the DESeq2 pipeline and obtain differential expression results based on the statistical model.

```{r}
txdb <- makeTxDbFromGFF("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/Esalsugineum_annotation.gtf")

k <- keys(txdb, keytype = "TXNAME")

tx2gene <- select(txdb, k, "GENEID", "TXNAME")

library(readr)

es_samples <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/quants/es/essamps.txt", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE)

setwd("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/quants/es")
files <- file.path(es_samples$Sample, "quant.sf") # telling r where to find the quant.sf files


txi <- tximport(files, type = "salmon", tx2gene = tx2gene, countsFromAbundance = "lengthScaledTPM") 

# transcript import, imports certain quantification files. salmon is a program that takes fastq files and skips the mapping step to just look at known genes to quantify them. countsfromabundance normalizes the expression data based on certain features of the genes (i.e. lengths .. ). tx2gene = tx2gene puts at gene level (AKA no isoforms)

# load in with broad design
dds <- DESeqDataSetFromTximport(txi, es_samples, ~ Condition)

# let's impose some slightly agressive pre-filtering:
# gene must have at least 10 reads in at least 4 experiments
keep <- rowSums(counts(dds) >= 10) >= 4 

dds <- dds[keep,] # only retaining the keep genes

# run the deseq2 pipeline
dds <- DESeq(dds) # the stats model
```

## Sample distance heatmap

This next chunk runs qc (quality control) on the RNAseq data to ensure that the samples are behaving the way we expect. The code makes a sample distance heatmap which tells us how similar the samples are to each other.

```{r}

vsd <- vst(dds, blind=FALSE) # vst = variance stabilized transformation (flattening the numbers so they're less affected by variance that DEseq cant explain given the model provided to it)

library("RColorBrewer")
library("pheatmap")
sampleDists <- dist(t(assay(vsd))) # calculating a distance between all samples based on the gene expression value of every gene
sampleDistMatrix <- as.matrix(sampleDists) # converts sampleDists to a matrix
rownames(sampleDistMatrix) <- vsd$Sample2 
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)
```

Get rid of the problematic samples and re-do the DESeq2 workflow

```{r}

es_metadata2 <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/quants/es/essamps_removed.txt", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE)

es_metadata2 = na.omit(es_metadata2) #gets rid of the row that has all NA 


setwd("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/quants/es")

files <- file.path(es_metadata2$Sample, "quant.sf")

txi <- tximport(files, type = "salmon", tx2gene = tx2gene, countsFromAbundance = "lengthScaledTPM")

dds <- DESeqDataSetFromTximport(txi, es_metadata2, ~ Condition)

# let's impose some slightly agressive pre-filtering:
# gene must have at least 10 reads in at least 4 experiments
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep,]

# run the deseq2 pipeline
dds <- DESeq(dds)

```

```{r}

vsd <- vst(dds, blind=FALSE) # vst = variance stabilized transformation (flattening the numbers so they're less affected by variance that DEseq cant explain given the model provided to it)

library("RColorBrewer")
library("pheatmap")
sampleDists <- dist(t(assay(vsd))) # calculating a distance between all samples based on the gene expression value of every gene
sampleDistMatrix <- as.matrix(sampleDists) # converts sampleDists to a matrix
rownames(sampleDistMatrix) <- vsd$Sample2 
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)
```

## Creating DE tables

In the next chunk, results() conducts differential expression analysis. The results are stored in res as a dataframe. filter() filters out results that are not significant (only takes results with p-values that are less than or equal to .05 or log2foldchanges that are greater than or equal to one) and distinct() removes any duplicate rows.

```{r}
res <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"), tidy = T)

es_whole_up <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange >= 1) %>%
  dplyr::distinct(row) 

# 2^1 AKA looking for 2x more different
# log2FoldChange = how much different are gene expression values in one condition versus the other
# control is the denominator for contrast 
# Example: 10 counts in salt/ 100 counts in no salt = 0.1, after log2foldchange would be a negative number
# es_whole_up are positive therefore are upregulated under salt stress
# es_whole_down are negative therefore are downregulated under salt stress



es_whole_down <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange <= -1) %>%
  dplyr::distinct(row) 

# x = 88 upregulated in salt, y = 194 downregulated in salt for just whole samples


res <- results(dds, contrast = c("Condition", "nuc_salt", "nuc_control"), tidy = T)

es_nuc_up <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange >= 1) %>%
  dplyr::distinct(row) 


es_nuc_down <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange <= -1) %>%
  dplyr::distinct(row) 

# x = 1890 upregulated in salt, y = 2714 downregulated in salt for just nuclei samples


res <- results(dds, contrast = c("Condition", "nuc_salt", "whole_salt"), tidy = T)

es_nuc_whole_salt_up <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange >= 1) %>%
  dplyr::distinct(row) 



es_nuc_whole_salt_down <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange <= -1) %>%
  dplyr::distinct(row) 

# x = 3477 upregulated in salt, y = 4133 downregulated in salt for just salt samples


res <- results(dds, contrast = c("Condition", "nuc_control", "whole_control"), tidy = T)

es_nuc_whole_ctrl_up <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange >= 1) %>%
  dplyr::distinct(row) 



es_nuc_whole_ctrl_down <- res %>%
  dplyr::filter(padj <= .05 &
                  log2FoldChange <= -1) %>%
  dplyr::distinct(row) 


# x = 2002 upregulated in salt, y = 1878 downregulated in salt for just control samples
```

## Finding GO terms

The following code retrieves the GO terms for up-regulated genes and creates a dotplot with GO terms on the y-axis and FoldEnrichment on the x-axis. The padjustmethod adjusts for multiple testing. TERM2GENE is the df that maps goterms to geneIDs.

```{r}
goterms <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/es_ensembl_go_term.txt", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE) %>%
  dplyr::select(2,1)

background <- rownames(dds) %>%
  as.data.frame() %>%
  dplyr::rename(gene = 1)

library(dbplyr)
library(clusterProfiler)
library(DOSE)
library(enrichplot)


es_whole_up_go <- enricher(
es_whole_up$row,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
 background$gene,
  minGSSize = 10,
  maxGSSize = 500,
  qvalueCutoff = 0.05,
  gson = NULL,
 TERM2GENE =  goterms
)

# genes upregulated by salt in the whole samples. 

head(es_whole_up_go)

es_whole_up_go <- mutate(es_whole_up_go, FoldEnrichment = parse_ratio(GeneRatio) / parse_ratio(BgRatio))

# mutate adds a column where a new calculation occurs.


dotplot(es_whole_up_go, x="FoldEnrichment")


```

The next chunk repeats the process above but for up-regulated nuclear genes salt vs. control

```{r}
es_nuc_up_go <- enricher(
es_nuc_up$row,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
 background$gene,
  minGSSize = 10,
  maxGSSize = 500,
  qvalueCutoff = 0.05,
  gson = NULL,
 TERM2GENE =  goterms
)


head(es_nuc_up_go)

es_nuc_up_go <- mutate(es_nuc_up_go, FoldEnrichment = parse_ratio(GeneRatio) / parse_ratio(BgRatio))

dotplot(es_nuc_up_go, x="FoldEnrichment")
```

And again for up-regulated genes in nuclear vs whole during control

```{r}
es_nuc_whole_ctrl_up_go <- enricher(
es_nuc_whole_ctrl_up$row,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
 background$gene,
  minGSSize = 10,
  maxGSSize = 500,
  qvalueCutoff = 0.05,
  gson = NULL,
 TERM2GENE =  goterms
)


head(es_nuc_whole_ctrl_up_go)

es_nuc_whole_ctrl_up_go <- mutate(es_nuc_whole_ctrl_up_go, FoldEnrichment = parse_ratio(GeneRatio) / parse_ratio(BgRatio))

pdf("C:/Users/cassi/OneDrive/Desktop/REU/Analyses/es_dotplot_nucwholectrlupgo.pdf",
    width = 8, height = 8)

dotplot(es_nuc_whole_ctrl_up_go, x="FoldEnrichment")

dev.off()
```

## Plot of DEGs

The next chunk of code makes a plot showing all of the deferentially expressed genes (DEGs).

```{r}
library(tidyverse)
res <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"), tidy = T)

# results conducts differential expression analysis on whole_salt versus whole_control samples 

es_whole_salt <- res %>%
  dplyr::filter(padj <= .05 &
                  abs(log2FoldChange) >= 1) %>%
  dplyr::mutate(rank = dense_rank(desc(log2FoldChange)))

# keeps only the rows where the adjusted p-value is less than or equal to 0.05 and the absolute value of the log2foldchange is greater than or equal to 1. 

# mutate adds a new column called rank to the filtered dataset. The dense_rank function assigns a rank to each row based on the descending order of the log2FoldChange values. Higher absolute fold changes will have lower ranks.

library("clipr")
es_whole_salt %>% 
  distinct(row) %>%
  write_clip()

 es_whole_salt %>%
   ggplot(aes(x = rank, y = log2FoldChange, color = padj)) +
  scale_x_reverse() +
  geom_point(size = 1.8, alpha = .75) +
  viridis::scale_color_viridis() +
  xlab('log2FC rank (most upregulated = rank 1)') +
  ggtitle("DE ranking of DEGs b/w whole salt and whole control") +
   theme_classic()
```

It also creates another dotplot of GO terms, but for genes DOWN-regulated by salt in whole samples

```{r}
es_whole_down_go <- enricher(
es_whole_down$row,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
 background$gene,
  minGSSize = 10,
  maxGSSize = 500,
  qvalueCutoff = 0.05,
  gson = NULL,
 TERM2GENE =  goterms
)

# genes downregulated by salt in the whole samples. padjustmethod adjusts for multiple testing. TERM2GENE is the df that maps goterms to geneIDs.
 
#head(cs_nuc_up_go)

es_whole_down_go <- mutate(es_whole_down_go, FoldEnrichment = parse_ratio(GeneRatio) / parse_ratio(BgRatio))

pdf("C:/Users/cassi/OneDrive/Desktop/REU/Analyses/es_dotplot_nucwholedowngo.pdf",
    width = 8, height = 8)

dotplot(es_whole_down_go, x="FoldEnrichment")

dev.off()
```

## Dataframe of Es RNAs

The next chunk of code loads in the IDs and types of RNAs for Es and creates a dataframe specifying whether the RNA is coding, noncoding, int coding, or int noncoding. It also utilizes read_delim() to read delimited text files.

```{r}
library(readr) # readr provides functions for reading delimited text files.

es_as_cod <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/es_antisense_coding_txIDs.txt", 
                                        delim = "\t", escape_double = FALSE, 
                                        col_names = FALSE, trim_ws = TRUE) %>% mutate(type = "as-cod")

# reads the file of antisense coding RNAs and adds a new column called type that maps as_cod to each 

es_as_nc <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/es_antisense_noncoding_txIDs.txt", 
                        delim = "\t", escape_double = FALSE, 
                        col_names = FALSE, trim_ws = TRUE) %>% mutate(type = "as-lncRNA")

es_int_cod <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/es_lincRNA_coding_txIDs.txt", 
                        delim = "\t", escape_double = FALSE, 
                        col_names = FALSE, trim_ws = TRUE) %>% mutate(type = "int-cod")

es_int_nc <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/es_lincRNA_noncoding_txIDs.txt", 
                       delim = "\t", escape_double = FALSE, 
                       col_names = FALSE, trim_ws = TRUE) %>% mutate(type = "lincRNA")

es_as_cod <- right_join(tx2gene, es_as_cod, by = c("TXNAME" = "X1"))
es_as_nc <- right_join(tx2gene, es_as_nc, by = c("TXNAME" = "X1"))
es_int_nc <- right_join(tx2gene, es_int_nc, by = c("TXNAME" = "X1"))
es_int_cod <- right_join(tx2gene, es_int_cod, by = c("TXNAME" = "X1"))

# joins each dataframe to tx2gene by the transcript name

es_RNAs <- rbind(es_as_cod,
                 es_as_nc,
                 es_int_cod,
                 es_int_nc)

# rbind combines the four dataframes into one dataframe called es_RNAs

tmap <- read_delim("C:/Users/cassi/OneDrive/Desktop/REU/Nelson_lab/gene_lists/tmap_files/es_gffcompare.Esalsugineum_merged.gtf.tmap", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE)
```

## Volcano Plot

```{r}
library(EnhancedVolcano)
library(apeglm)
res <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"))

res2 <- as.data.frame(res) %>% rownames_to_column(var = "gene") %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05)

res2 %>%
  inner_join(., es_RNAs, by = c("gene" = "GENEID")) %>%
  left_join(., tmap, by = c("gene" = "qry_gene_id"))


res <- lfcShrink(dds,
    contrast = c('Condition','whole_salt','whole_control'), res=res, type = 'ashr')



  #lab_italics <- paste0("italic('", rownames(res), "')")
  #selectLab_italics = paste0(
    #"italic('",
    #c('MSTRG.8713','MSTRG.18717','MSTRG.12528'),
    #"')")



 EnhancedVolcano(res,
    lab = rownames(res),
    x = 'log2FoldChange',
    y = 'pvalue',
        title = 'Whole salt vs whole control',
    subtitle = "",
    #selectLab = selectLab_italics,
    xlab = bquote(~Log[2]~ 'fold change'),
    pCutoff = 10e-2,
    FCcutoff = 1.0,
    pointSize = 2.5,
    labSize = 3.0,
    labCol = 'black',
    labFace = 'bold',
    boxedLabels = TRUE,
    parseLabels = TRUE,
    col = c('black', 'pink', 'purple', 'red3'),
    colAlpha = 3/5,
    legendPosition = 'right',
    legendLabSize = 12,
    legendIconSize = 4.0,
    drawConnectors = TRUE,
    widthConnectors = 1.0,
    colConnectors = 'black')

 ggsave(plot = last_plot(),"C:/Users/cassi/OneDrive/Desktop/REU/Analyses/es_test_volcano.pdf", width = 8, height = 6)
```

## Plot lncRNA counts

The next chunk makes a plot of the counts of the genes identified by the volcano plot

Change these to match the volcano plot appropriately

```{r}
plotCounts(dds, gene="EUTSA_v10009008mg", intgroup="Condition")

plotCounts(dds, gene="EUTSA_v10002728mg", intgroup="Condition")

plotCounts(dds, gene="EUTSA_v10010399mg", intgroup="Condition")

plotCounts(dds, gene="EUTSA_v10010049mg", intgroup="Condition")

plotCounts(dds, gene="EUTSA_v10016322mg", intgroup="Condition")

plotCounts(dds, gene="EUTSA_v10025705mg", intgroup="Condition")

plotCounts(dds, gene="EUTSA_v10014841mg", intgroup="Condition")

plotCounts(dds, gene="EUTSA_v10022908mg", intgroup="Condition")

plotCounts(dds, gene="EUTSA_v10019041mg", intgroup="Condition")
```

## DEGs Venn diagrams

The next chunk of code finds the overlap of DEGs between the Es genes of interest

```{r}
es_nuc <- results(dds, contrast = c("Condition", "nuc_salt", "nuc_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "nuclear_salt")

# conducts DE analysis in nuclear salt versus nuclear control samples. It filters only data that have an absolute value of a log2foldchange that is >= 1 and a p <= 0.05 (only keeps significant data), and adds a type column named nuclear_salt

es_whole <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "whole_salt")

es_comp_salt <- results(dds, contrast = c("Condition", "nuc_salt", "whole_salt"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "compartment_salt")

# at_comp_salt is composed of every salt sample

es_comp_ctrl <- results(dds, contrast = c("Condition", "nuc_control", "whole_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "compartment_control")

# at_comp_ctrl is composed of all control samples

library(ggvenn)
library(ggVennDiagram)
combined <- list(nuclear_salt = es_nuc$row,
                 whole_salt = es_whole$row,
                 compartment_control = es_comp_ctrl$row,
                 compartment_salt = es_comp_salt$row)
ggvenn(combined,
       set_name_size = 2) # had to change the name size from 4 to 2.5 to get the names to fit in the final image of the plot



# make a venn diagram for newly annotated trancripts:
es_nuc <- results(dds, contrast = c("Condition", "nuc_salt", "nuc_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "nuclear_salt") %>%
  filter(grepl("MSTRG", row))

es_whole <- results(dds, contrast = c("Condition", "whole_salt", "whole_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "whole_salt") %>%
  filter(grepl("MSTRG", row))

es_comp_salt <- results(dds, contrast = c("Condition", "nuc_salt", "whole_salt"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "compartment_salt") %>%
  filter(grepl("MSTRG", row))

es_comp_ctrl <- results(dds, contrast = c("Condition", "nuc_control", "whole_control"), tidy = T) %>%
  filter(abs(log2FoldChange) >= 1 &
           padj <= .05) %>%
  mutate(type = "compartment_control") %>%
  filter(grepl("MSTRG", row))


combined <- list(nuclear_salt = es_nuc$row,
                 whole_salt = es_whole$row,
                 compartment_control = es_comp_ctrl$row,
                 compartment_salt = es_comp_salt$row)
ggvenn(combined,
       set_name_size = 2) # had to change the name size from 4 to 2


combined2 <- rbind(es_nuc, es_whole, es_comp_ctrl, es_comp_salt)

library(data.table)
combined2_wide <- data.table::dcast(setDT(combined2), row ~ type, fun.aggregate = length) %>% as.data.frame()

combined2_wide %>%
  filter(compartment_control == 1 &
           compartment_salt == 0 &
           nuclear_salt == 1 &
           whole_salt == 0) %>%
  distinct(row) %>%
  left_join(., es_RNAs, by = c("row" = "GENEID")) %>%
  left_join(., tmap, by = c("row" = "qry_gene_id"))

# combined2 wide is a dataframe containing a column for genes and four columns representing sample types. "1"s in the type column represent the gene being present in that sample.

```

```{r}
tpm <- txi$abundance %>%
  as.data.frame() %>%
  rownames_to_column(var = "gene") %>%
  filter(grepl("MSTRG", gene)) %>%
  column_to_rownames(var = "gene")
colnames(tpm) <- es_metadata2$Condition

x <- apply(tpm, 1, mad) #Calculate IQR  
y <- tpm[x>quantile(x,0.5),] # selecting top 50% most variable genes  

tpm_z <- scale(t(t(tpm)))
# filter for variability

lnc_vst <- assay(vsd) %>%
  as.data.frame() %>%
  rownames_to_column(var = "gene") %>%
  filter(grepl("MSTRG", gene)) %>%
  column_to_rownames(var = "gene") 
colnames(lnc_vst) <- es_metadata2$Condition
lnc_vst<- lnc_vst %>%
  relocate(8, .after = 5)
x <- apply(lnc_vst, 1, mad) #Calculate IQR  
y <- lnc_vst[x>quantile(x,0.5),] # selecting top 50% most variable genes  

lnc_vst_z <- t(scale(t(y)))

library(ComplexHeatmap)
library(pheatmap)
paletteLength <- 50
myColor <- colorRampPalette(c("darkblue", "white", "orange"))(paletteLength)
# length(breaks) == length(paletteLength) + 1
# use floor and ceiling to deal with even/odd length pallettelengths
myBreaks <- c(seq(min(lnc_vst_z), 0, length.out=ceiling(paletteLength/2) + 1), 
              seq(max(lnc_vst_z)/paletteLength, max(lnc_vst_z), length.out=floor(paletteLength/2)))



samp1 <- rownames(lnc_vst_z) %>% as.data.frame() %>% rename(gene = 1)

es_RNAs2 <- es_RNAs %>%
  select(-TXNAME) %>%
  inner_join(., samp1, by = c("GENEID" = "gene")) %>%
  distinct(GENEID, .keep_all = T) %>%
  column_to_rownames(var = "GENEID")


ann_colors = list(
  type = c("as-cod" = "lightblue", "as-lncRNA" = "purple", "int-cod" = "red", "lincRNA" = "black"))


pdf("C:/Users/cassi/OneDrive/Desktop/REU/Analyses/es_RNA_heatmap.pdf",
    width = 8, height = 8)
pheatmap(lnc_vst_z, breaks = myBreaks, color = myColor,
         cluster_cols = F, annotation_row = es_RNAs2, annotation_colors = ann_colors, name = "Z-Score")



dev.off()
```
